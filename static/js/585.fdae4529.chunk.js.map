{"version":3,"file":"static/js/585.fdae4529.chunk.js","mappings":"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","sources":["services/api.ts","hooks/useApi.ts","pages/students/GradeViewer.tsx"],"sourcesContent":["import axios, { InternalAxiosRequestConfig } from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Cache configuration\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\nconst cache = new Map<string, { data: any; timestamp: number }>();\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for authentication and caching\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Check cache for GET requests\n  if (config.method === 'get' && config.url) {\n    const cacheKey = `${config.url}${JSON.stringify(config.params || {})}`;\n    const cachedData = cache.get(cacheKey);\n    \n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_DURATION) {\n      return Promise.reject({\n        response: { data: cachedData.data },\n        isCached: true,\n      });\n    }\n  }\n\n  return config;\n});\n\n// Add response interceptor for error handling and caching\napi.interceptors.response.use(\n  (response) => {\n    // Cache successful GET responses\n    if (response.config.method === 'get' && response.config.url) {\n      const cacheKey = `${response.config.url}${JSON.stringify(response.config.params || {})}`;\n      cache.set(cacheKey, {\n        data: response.data,\n        timestamp: Date.now(),\n      });\n    }\n\n    return response;\n  },\n  (error: any) => {\n    // Handle cached responses\n    if (error.isCached) {\n      return Promise.resolve(error.response);\n    }\n\n    // Handle unauthorized access\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n\n    // Handle network errors\n    if (!error.response) {\n      console.error('Network error:', error);\n      // You might want to show a user-friendly error message here\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to clear cache\nexport const clearCache = () => {\n  cache.clear();\n};\n\nexport default api; ","import { useState, useCallback } from 'react';\nimport api from '../services/api';\n\ninterface UseApiResult<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n  execute: (...args: any[]) => Promise<void>;\n}\n\nexport function useApi<T>(endpoint: string, method: 'get' | 'post' | 'put' | 'delete' = 'get'): UseApiResult<T> {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const execute = useCallback(async (...args: any[]) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await api[method](endpoint, ...args);\n      setData(response.data as T);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('An error occurred'));\n    } finally {\n      setLoading(false);\n    }\n  }, [endpoint, method]);\n\n  return { data, loading, error, execute };\n} ","import React, { useState, useEffect } from 'react';\nimport { useApi } from '../../hooks/useApi';\nimport LoadingSpinner from '../../components/LoadingSpinner';\n\ninterface Grade {\n  id: number;\n  studentId: number;\n  studentName: string;\n  subject: string;\n  marks: number;\n  maxMarks: number;\n  remarks: string;\n  date: string;\n}\n\ninterface Class {\n  id: number;\n  name: string;\n  sections: Section[];\n}\n\ninterface Section {\n  id: number;\n  name: string;\n  students: Student[];\n}\n\ninterface Student {\n  id: number;\n  name: string;\n  rollNumber: string;\n}\n\nconst GradeViewer: React.FC = () => {\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [selectedSection, setSelectedSection] = useState<string>('');\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n  const [viewType, setViewType] = useState<'class' | 'section' | 'student'>('class');\n\n  const { data: classes, loading: loadingClasses, execute: fetchClasses } = useApi<Class[]>('/classes');\n  const { data: grades, loading: loadingGrades, execute: fetchGrades } = useApi<Grade[]>('/grades');\n\n  useEffect(() => {\n    fetchClasses();\n  }, []);\n\n  useEffect(() => {\n    if (selectedClass && selectedSection && selectedStudent) {\n      fetchGrades(`/grades/${selectedClass}/${selectedSection}/${selectedStudent}`);\n    }\n  }, [selectedClass, selectedSection, selectedStudent]);\n\n  const calculatePercentage = (marks: number, maxMarks: number) => {\n    return ((marks / maxMarks) * 100).toFixed(2);\n  };\n\n  const getGradeColor = (percentage: number) => {\n    if (percentage >= 90) return 'text-green-600';\n    if (percentage >= 80) return 'text-blue-600';\n    if (percentage >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loadingClasses) {\n    return <LoadingSpinner size=\"large\" />;\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-6\">Grade Viewer</h2>\n      \n      {/* View Type Selection */}\n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">View Type</label>\n        <select\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n          value={viewType}\n          onChange={(e) => setViewType(e.target.value as 'class' | 'section' | 'student')}\n        >\n          <option value=\"class\">Class Overview</option>\n          <option value=\"section\">Section Details</option>\n          <option value=\"student\">Student Details</option>\n        </select>\n      </div>\n\n      {/* Class Selection */}\n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Class</label>\n        <select\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n          value={selectedClass}\n          onChange={(e) => setSelectedClass(e.target.value)}\n        >\n          <option value=\"\">Select a class</option>\n          {classes?.map((cls) => (\n            <option key={cls.id} value={cls.id}>\n              {cls.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Section Selection */}\n      {selectedClass && viewType !== 'class' && (\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Section</label>\n          <select\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            value={selectedSection}\n            onChange={(e) => setSelectedSection(e.target.value)}\n          >\n            <option value=\"\">Select a section</option>\n            {classes\n              ?.find((cls) => cls.id.toString() === selectedClass)\n              ?.sections.map((section) => (\n                <option key={section.id} value={section.id}>\n                  {section.name}\n                </option>\n              ))}\n          </select>\n        </div>\n      )}\n\n      {/* Student Selection */}\n      {selectedSection && viewType === 'student' && (\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Student</label>\n          <select\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            value={selectedStudent}\n            onChange={(e) => setSelectedStudent(e.target.value)}\n          >\n            <option value=\"\">Select a student</option>\n            {classes\n              ?.find((cls) => cls.id.toString() === selectedClass)\n              ?.sections.find((section) => section.id.toString() === selectedSection)\n              ?.students.map((student) => (\n                <option key={student.id} value={student.id}>\n                  {student.name} ({student.rollNumber})\n                </option>\n              ))}\n          </select>\n        </div>\n      )}\n\n      {/* Grades Display */}\n      {loadingGrades ? (\n        <LoadingSpinner size=\"medium\" />\n      ) : (\n        <div className=\"mt-6\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Subject\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Marks\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Max Marks\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Percentage\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Remarks\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {grades?.map((grade) => {\n                  const percentage = calculatePercentage(grade.marks, grade.maxMarks);\n                  return (\n                    <tr key={grade.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {grade.subject}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {grade.marks}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {grade.maxMarks}\n                      </td>\n                      <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${getGradeColor(Number(percentage))}`}>\n                        {percentage}%\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {grade.remarks}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GradeViewer; "],"names":["cache","Map","api","axios","create","baseURL","process","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","method","url","cacheKey","JSON","stringify","params","cachedData","get","Date","now","timestamp","Promise","reject","response","data","isCached","set","error","_error$response","resolve","status","removeItem","window","location","href","console","useApi","endpoint","arguments","length","undefined","setData","useState","loading","setLoading","setError","execute","useCallback","async","_len","args","Array","_key","err","Error","GradeViewer","_classes$find","_classes$find2","_classes$find2$sectio","selectedClass","setSelectedClass","selectedSection","setSelectedSection","selectedStudent","setSelectedStudent","viewType","setViewType","classes","loadingClasses","fetchClasses","grades","loadingGrades","fetchGrades","useEffect","getGradeColor","percentage","_jsx","LoadingSpinner","size","_jsxs","className","children","value","onChange","e","target","map","cls","id","name","find","toString","sections","section","students","student","rollNumber","grade","marks","maxMarks","toFixed","calculatePercentage","subject","Number","remarks"],"sourceRoot":""}